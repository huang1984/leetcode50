'''
设计一个支持 push，pop，top 操作，并能在常数时间内检索到最小元素的栈。

push(x) -- 将元素 x 推入栈中。
pop() -- 删除栈顶的元素。
top() -- 获取栈顶元素。
getMin() -- 检索栈中的最小元素。
示例:

MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> 返回 -3.
minStack.pop();
minStack.top();      --> 返回 0.
minStack.getMin();   --> 返回 -2.
'''


class MinStack(object):
    def __init__(self):
        """
        initialize your data structure here.
        """
        self.stack = []
        self.minStack = []
 
    def push(self, x):
        """
        :type x: int
        :rtype: nothing
        """
        self.stack.append(x)
        if len(self.minStack) == 0 or x <= self.minStack[-1]:
            self.minStack.append(x)
 
    def pop(self):
        """
        :rtype: nothing
        """
        if not self.isEmpty():
            if self.top() == self.minStack[-1]:
                self.minStack.pop()
            self.stack.pop()
        return
 
    def top(self):
        """
        :rtype: int
        """
        if not self.isEmpty():
            return self.stack[-1]
 
    def getMin(self):
        """
        :rtype: int
        """
        if not self.isEmpty():
            return self.minStack[-1]
 
    def isEmpty(self):
        return len(self.stack) < 1
 
 
if __name__ == "__main__":
    minstack = MinStack()
    minstack.push(2)
    minstack.push(0)
    minstack.push(3)
    minstack.push(0)
    print(minstack.getMin())
    minstack.pop()
    print(minstack.getMin())
    minstack.pop()
    print(minstack.getMin())
    minstack.pop()
    print(minstack.getMin())
